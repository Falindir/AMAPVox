#version 140

uniform mat4 viewMatrix, projMatrix, normalMatrix;
uniform vec3 eyePosition;

in vec4 position;
in vec3 normal;
in vec3 instance_position;
in vec4 instance_color;

flat out vec4 Color;
 
void main()
{
    vec4 Position = vec4(10, 10, 10);
    vec3 La = vec3(0.5, 0.5, 0.5);
    vec3 Ld = vec3(0.5, 0.5, 0.5);
    vec3 Ls = vec3(0.5, 0.5, 0.5);
    vec3 Ka = vec3(0, 0, 0);
    vec3 Kd = vec3(0.8, 0, 0);
    vec3 Ks=vec3(0.5, 0.5, 0.5);
    float Shininess = 1;

    vec3 tnorm = normalize(normalMatrix * normal);
    vec3 eyeCoords = viewMatrix  * position;

    vec3 s = normalize(vec3(Light.Position - eyeCoords));
    vec3 v = normalize(-eyeCoords.xyz);
    vec3 r = reflect(-s, tnorm);
    vec3 ambient = Light.La * Material.Ka;
    float sDotN = max(dot(s, tnorm), 0.0);
    vec3 diffuse = Light.Ld * Material.Kd * sDotN;
    vec3 spec = vec3(0.0);
    if(sDotN > 0.0){
        spec = Light.Ls * Material.Ks * pow(max(dot(r, v),0.0), Material.shininess);
    }

    color = ambient + diffuse + spec;


    Color = color;

    gl_Position = projMatrix * viewMatrix  * position;
}