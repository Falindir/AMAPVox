#version 140

uniform mat4 viewMatrix, projMatrix, normalMatrix;

in vec4 position;
in vec3 normal;
in vec3 color;

flat out vec4 Color;
 
void main()
{

    vec3 LightPosition = vec3(10, 10, 10);
    vec3 La = vec3(1.0, 1.0, 1.0);
    vec3 Ld = vec3(1.0, 1.0, 1.0);
    vec3 Ls = vec3(1.0, 1.0, 1.0);
    vec3 Ka = vec3(color.r*0.2, color.g*0.2, color.b*0.2);
    vec3 Kd = vec3(color.r, color.g, color.b);
    vec3 Ks=vec3(0.5, 0.5, 0.5);
    float Shininess = 1;

    vec3 tnorm = normalize(mat3(normalMatrix) * normal);
    vec3 eyeCoords = vec3(0.5, 0.5, 0.0);

    vec3 s = normalize(LightPosition - eyeCoords);
    vec3 v = normalize(-eyeCoords);
    vec3 r = reflect(-s, tnorm);
    vec3 ambient = La * Ka;
    float sDotN = max(dot(s, tnorm), 0.0);
    vec3 diffuse = Ld * Kd * sDotN;
    vec3 spec = vec3(0.5, 0.5, 0.5);
    if(sDotN > 0.0){
        spec = Ls * Ks * pow(max(dot(r, v),0.0), Shininess);
    }

    Color = vec4(ambient + diffuse + spec, 1.0);

    gl_Position = projMatrix * viewMatrix  * position;
}