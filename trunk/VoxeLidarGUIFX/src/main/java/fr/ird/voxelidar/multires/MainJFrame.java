/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.ird.voxelidar.multires;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.vecmath.Point3d;
import javax.vecmath.Point3i;

/**
 *
 * @author calcul
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private DefaultListModel<File> model;
    private File outputFile;
    private float maxPAD;
    private int samplingNumberThreshold;
    
    public MainJFrame() {
        initComponents();
        
        model = new DefaultListModel();
        jList1.setModel(model);
        
        outputFile = new File(System.getProperty("user.home")+"/merged_res.vox");
        
        jTextField3.setText(outputFile.getAbsolutePath());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jFileChooser1.setMultiSelectionEnabled(true);

        jFileChooser2.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser2.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Multi-resolution merging");

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Execute");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("5");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Max PAD");

        jLabel2.setText("Sampling number threshold");

        jTextField2.setText("8");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear all");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField3.setEditable(false);

        jButton5.setText("Open");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Ouput file");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(5, 5, 5)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)))
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Point3i getIndicesFromIndices(Point3i indices, double resolution){
        
        return new Point3i((int)(indices.x/resolution), (int)(indices.y/resolution), (int)(indices.z/resolution));
    }
    
    //formule: i*splitY*splitZ + j*splitZ + k
    private int getLineFromIndices(Point3i indices, Point3i split){
        
        int result = (indices.x*split.y*split.z) + (indices.y*split.z) +  indices.z;
        
        return result;
    }
    
    private void calculatePAD(Voxel vox, double resolution) {
        
        if(resolution == 1.0){
            maxPAD=3.536958f;
        }else if(resolution == 2.0){
            maxPAD=2.262798f;
        }else if(resolution == 2.0){
            maxPAD=1.749859f;
        }else if(resolution == 4.0){
            maxPAD=1.3882959f;
        }else{
            maxPAD=3.536958f;
        }
        
        if (vox.nbSampling >= vox.nbEchos) {
            
            vox.lMeanTotal = vox.lgTotal / (vox.nbSampling);

        }
        
        float pad;

        if (vox instanceof TLSVoxel) {

            TLSVoxel tlsVox = (TLSVoxel) vox;

            /**
             * *PADBV**
             */
            if (tlsVox.bflEntering <= 0) {

                pad = Float.NaN;
                tlsVox.transmittance = Float.NaN;

            } else if (tlsVox.bflIntercepted > tlsVox.bflEntering) {

                tlsVox.transmittance = Float.NaN;
                pad = Float.NaN;

            } else {

                tlsVox.transmittance = (tlsVox.bflEntering - tlsVox.bflIntercepted) / tlsVox.bflEntering;

                if (tlsVox.nbSampling > 1 && tlsVox.transmittance == 0) {

                    pad = maxPAD;

                } else if (tlsVox.nbSampling <= 2 && tlsVox.transmittance == 0) {

                    pad = Float.NaN;

                } else {
                    
                    pad = (float) (Math.log(tlsVox.transmittance) / (-0.5 * tlsVox.lMeanTotal));
                    
                    if (Float.isNaN(pad)) {
                        pad = Float.NaN;
                    } else if (pad > maxPAD || Float.isInfinite(pad)) {
                        pad = maxPAD;
                    }
                }

            }
            
            tlsVox.PadBflTotal = pad + 0.0f; //set +0.0f to avoid -0.0f

        } else {

            ALSVoxel alsVox = (ALSVoxel) vox;

            if (alsVox.bvEntering <= 0) {
                
                pad = Float.NaN;
                alsVox.transmittance = Float.NaN;

            } else if (alsVox.bvIntercepted > alsVox.bvEntering) {

                pad = Float.NaN;
                alsVox.transmittance = Float.NaN;

            } else {

                alsVox.transmittance = (alsVox.bvEntering - alsVox.bvIntercepted) / alsVox.bvEntering;

                if (alsVox.nbSampling > 1 && alsVox.transmittance == 0) {

                    pad = maxPAD;

                } else if (alsVox.nbSampling < 2 && alsVox.transmittance == 0) {

                    pad = Float.NaN;

                } else {

                    pad = (float) (Math.log(alsVox.transmittance) / (-0.5 * alsVox.lMeanTotal));

                    if (Float.isNaN(pad)) {
                        pad = Float.NaN;
                    } else if (pad > maxPAD || Float.isInfinite(pad)) {
                        pad = maxPAD;
                    }
                }

            }
            alsVox.PadBVTotal = pad + 0.0f; //set +0.0f to avoid -0.0f
        }

    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        
        maxPAD = Float.valueOf(jTextField1.getText());
        samplingNumberThreshold = Integer.valueOf(jTextField2.getText());
        
        final Enumeration<File> elements = model.elements();
        final Map<Double, VoxelSpace> voxelSpaces = new TreeMap<>();
        
        final ProgressJFrame progressJFrame = new ProgressJFrame();
        
        progressJFrame.setVisible(true);
        
        SwingWorker sw = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                
                int count = 0;
                Point3d resolution;
                double minResolution = 0;
                
                while(elements.hasMoreElements()){
                    
                    File f = elements.nextElement();
                    
                    progressJFrame.addText("Reading file: "+f.getAbsolutePath()+"\n");

                    VoxelSpace voxelSpace = new VoxelSpace(f);
                    voxelSpace.load();
                    
                    resolution = voxelSpace.data.resolution;
                    try{
                        voxelSpaces.put(resolution.x, voxelSpace);
                    }catch(Exception e){
                        System.err.println(e);
                    }
                    
                    
                    if(count == 0){
                        minResolution = resolution.x;
                    }else if(minResolution>resolution.x){
                        minResolution = resolution.x;
                    }
                    
                    count++;
                    
                    progressJFrame.addText("File read: "+f.getAbsolutePath()+"\n");
                    
                }
                
                
                Iterator<Entry<Double, VoxelSpace>> entries = voxelSpaces.entrySet().iterator();
                VoxelSpace vs = entries.next().getValue();
                
                /*
                Float[] iArray = vs.voxelsMap.get("i");
                Float[] jArray = vs.voxelsMap.get("j");
                Float[] kArray = vs.voxelsMap.get("k");
                
                Float[] nbSamplingArray = vs.voxelsMap.get("nbSampling");
                Float[] nbEchosArray = vs.voxelsMap.get("nbEchos");
                Float[] transmittanceArray = vs.voxelsMap.get("transmittance");
                Float[] padArray = vs.voxelsMap.get("PadBVTotal");
                */
                
                int correctValues = 0;
                int correctedValues = 0;
                int setToDefault = 0;
                int totalValues = vs.data.voxels.size();
                
                /**Calcul de la valeur moyenne de Pad de la scène (sous canopée et au dessus du sol)**/
                int nb = 0;
                float sumPad = 0;
                
                int[][] tabTemp = new int[vs.data.split.x][vs.data.split.y];
                
                //initialisation
                for (int[] tabTemp1 : tabTemp) {
                    for (int j = 0; j < tabTemp1.length; j++) {
                        tabTemp1[j] = -1;
                    }
                }
                
                //on cherche les voxels non vide les plus haut
                for(int n=0;n<vs.data.voxels.size();n++){
                    
                    Voxel v = vs.data.voxels.get(n);
                    int k = v.$k;
                    
                    if(v.nbSampling>0 && v.nbEchos>0 && k > tabTemp[v.$i][v.$j]){
                        tabTemp[v.$i][v.$j] = k;
                    }
                }
                
                //on calcule la valeur moyenne de chaque couche
                
                //calcul des intervalles
                float[] padMeanZ = new float[vs.data.split.z];
                int[] padMeanZCount = new int[vs.data.split.z];
                
                
                for(int i=0;i<vs.data.split.x;i++){
                    for(int j=0;j<vs.data.split.y;j++){
                        for(int k=0;k<vs.data.split.z;k++){
                            
                            //on vérifie qu'on est sous la canopée
                            if(k <= tabTemp[i][j]){
                                
                                Voxel vox = vs.data.getVoxel(i, j, k);
                            
                                for(int t=0;t<vs.data.split.z;t++){
                                    int min = t;
                                    int max = t+1;

                                    if(vox.ground_distance>=min && vox.ground_distance<max && vox.nbSampling > 1){
                                        double pad = ((ALSVoxel)vox).PadBVTotal;
                                        if(!Double.isNaN(pad) && pad < 3){
                                            padMeanZ[t]+= pad;
                                            padMeanZCount[t]++;
                                        }
                                        
                                        break;
                                    }

                                }
                            }
                        }
                    }
                }
                
                for(int x=0;x<padMeanZ.length;x++){
                    padMeanZ[x] = padMeanZ[x]/padMeanZCount[x];
                }
                
                
                for(int n=0;n<vs.data.voxels.size();n++){
                    
                    double currentResolution = vs.data.resolution.x;
                    
                    Voxel voxel = vs.data.voxels.get(n);
                    calculatePAD(voxel, currentResolution);
                    
                    entries = voxelSpaces.entrySet().iterator();
                    entries.next().getValue();
                    
                    float currentNbSampling = voxel.nbSampling;
                    double currentTransmittance = voxel.transmittance;
                    
                    
                    boolean outOfResolutions = false;
                    boolean uncorrectValue = false;
                    
                    VoxelSpace vsTemp;
                    Voxel voxTemp = null;
                    
                    //while(currentNbSampling < Math.pow(currentResolution, 2)+1 || currentTransmittance == 0){
                    while(currentNbSampling < Math.pow(currentResolution, 2)*2+1 || currentTransmittance == 0){
                    //while(currentNbSampling <= 0 || currentTransmittance == 0){  
                        uncorrectValue = true;
                        
                        if(!entries.hasNext()){
                            outOfResolutions = true;
                            break;
                        }
                        
                        Entry<Double, VoxelSpace> entry = entries.next();
                        vsTemp = entry.getValue();
                        currentResolution=entry.getKey();
                        
                        //il faudra utiliser la vraie position 
                        Point3i indices = getIndicesFromIndices(new Point3i(voxel.$i, voxel.$j, voxel.$k), currentResolution);
                        voxTemp = vsTemp.data.getVoxel(indices.x, indices.y, indices.z);
                        
                        calculatePAD(voxTemp, currentResolution);
                        
                        currentNbSampling = voxTemp.nbSampling;
                        currentTransmittance = voxTemp.transmittance;
                    }
                    
                    if(outOfResolutions){
                        //on met les valeurs par défaut
                        
                        if(((ALSVoxel)voxel).ground_distance>0){
                            currentResolution = 0;
                            ((ALSVoxel)voxel).PadBVTotal = padMeanZ[(int)voxel.ground_distance];
                        }else{
                            currentResolution = Double.NaN;
                        }
                        
                        setToDefault++;
                        
                    }else if(uncorrectValue){
                        //on applique la nouvelle valeur de Pad
                        
                        double oldValue = ((ALSVoxel)voxel).PadBVTotal;
                        double newValue = ((ALSVoxel)voxTemp).PadBVTotal;
                        
                        ((ALSVoxel)voxel).PadBVTotal = newValue;
                        
                        correctedValues++;
                        
                    }else{
                        correctValues++;
                    }
                    
                    ExtendedALSVoxel eV = new ExtendedALSVoxel((ALSVoxel)voxel);
                    
                    eV.resolution = currentResolution;
                    vs.data.voxels.set(n, eV);
                }
                
                
                System.out.println("Nombre de valeurs correctes: "+correctValues+"/"+totalValues);
                System.out.println("Nombre de valeurs corrigées: "+correctedValues+"/"+totalValues);
                System.out.println("Nombre de valeurs mises à défaut: "+setToDefault+"/"+totalValues);
                
                vs.write(outputFile);
                
                progressJFrame.stop();
                
                return null;
            }
        };
        
        sw.execute();
        
        
        
        //associer à chaque fichier sa résolution
        /*
            prendre le fichier de résolution la plus petite et vérifier le nbSampling
            si le nbSampling est inférieur au seuil d'échantillonnage requis, passer à la résolution supérieure
            remplacer le Pad du voxel du fichier ayant la résolution la plus petite et remplacer le Pad par 
            la valeur associée de la résolution supérieure
        */
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            File[] selectedFiles = jFileChooser1.getSelectedFiles();
            
            for (File selectedFile : selectedFiles) {
                model.addElement(selectedFile);
            }
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        model = new DefaultListModel();
        jList1.setModel(model);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        int[] selectedIndices = jList1.getSelectedIndices();
        
        for(int i=0;i<selectedIndices.length;i++){
            model.removeElementAt(i);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        try{
            jFileChooser2.setCurrentDirectory(new File(jTextField3.getText()));
        }catch(Exception e){}
        
        
        if (jFileChooser2.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            outputFile = jFileChooser2.getSelectedFile();
        }
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
