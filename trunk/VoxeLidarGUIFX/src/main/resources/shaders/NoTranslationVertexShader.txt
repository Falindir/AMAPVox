#version 140

uniform mat4 viewMatrix, projMatrix, normalMatrix;

in vec4 position;
in vec3 normal;
in vec3 color;

flat out vec3 Color;
 
void main()
{
 
    

    mat4 translation = mat4(vec4(1,0,0,0.8),
                        vec4(0,1,0,0.8),
                        vec4(0,0,1,0),
                        vec4(0,0,0,1));

    mat4 rotation = mat4(vec4(viewMatrix[0][0],viewMatrix[1][0],viewMatrix[2][0],0),
                        vec4(viewMatrix[0][1],viewMatrix[1][1],viewMatrix[2][1],0),
                        vec4(viewMatrix[0][2],viewMatrix[1][2],viewMatrix[2][2],0),
                        vec4(viewMatrix[0][3],viewMatrix[1][3],viewMatrix[2][3],1));

    mat4 scale = mat4(vec4(0.03,0,0,0),
                        vec4(0,0.03,0,0),
                        vec4(0,0,0.03,0),
                        vec4(0,0,0,1));

    vec4 LightPosition = vec4(0, 0, 0, 1);
    vec3 La = vec3(1.0, 1.0, 1.0);
    vec3 Ld = vec3(1.0, 1.0, 1.0);
    vec3 Ls = vec3(0.5, 0.5, 0.5);
    vec3 Ka = vec3(0, 0, 0);
    vec3 Kd = vec3(color.r, color.g, color.b);
    vec3 Ks=vec3(0.5, 0.5, 0.5);
    float Shininess = 1;

    vec3 tnorm = normalize(mat3(normalMatrix) * normal);
    vec4 eyeCoords = vec4(0, 0, 0, 1);

    vec3 s = normalize(vec3(LightPosition - eyeCoords));
    vec3 v = normalize(-eyeCoords.xyz);
    vec3 r = reflect(-s, tnorm);
    vec3 ambient = La * Ka;
    float sDotN = max(dot(s, tnorm), 0.0);
    vec3 diffuse = Ld * Kd * sDotN;
    vec3 spec = vec3(0.0);
    if(sDotN > 0.0){
        spec = Ls * Ks * pow(max(dot(r, v),0.0), Shininess);
    }

    Color = ambient + diffuse + spec;


    gl_Position = scale * position * rotation *translation;
}